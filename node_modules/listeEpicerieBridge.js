"use strict";

const Telegraf = require("telegraf");

const Utils = require("utils");

const ListeEpicerieBot = require("listeEpicerieBot");

const Markup = Telegraf.Markup;

const ListeEpicerieBridge =
{
  actions:
  {
    add: (context) =>
    {
      ListeEpicerieBridge.commands.add(context);
    }
    , addCategories: (context) =>
     {
       ListeEpicerieBridge.commands.addCategories(context);
     }
    , categorize: (context) =>
      {
        var message = context.session.message;

        message.callbackButtons = [];

        for (var categoryLabel in context.session.storage)
        {
          for (var itemLabel in context.session.storage[categoryLabel])
          {
            message.callbackButtons[message.callbackButtons.length] = Markup.callbackButton(
              itemLabel
              , `/categorizeSelect_callback ${itemLabel}, ${context.session.storage[categoryLabel][itemLabel]}`);
          }
        }

        var callbackButtons = Utils.pairElements(message.callbackButtons).concat(ListeEpicerieBridge.markups.categorizeCallbackButtons);

        context.editMessageReplyMarkup(Markup.inlineKeyboard(callbackButtons).resize());
      }
    , categorizeConfirm: (context) =>
      {
        var message = context.session.message;

        var dataText = context.update.callback_query.data.replace(/^\/categorizeConfirm_callback.*?\s*/im, "").trim();

        var category = null;

        ListeEpicerieBot.mapTextToCategories(context.session.storage, dataText, (storage, categoryLabel) =>
          {
            if (typeof storage[categoryLabel] !== "undefined")
            {
              category = categoryLabel;
            }
          });

        message.callbackButtons.forEach((callbackButton) =>
          {
            var dataText = callbackButton.callback_data.replace(/^\/categorizeSelectCancel_callback.*?\s*/im, "");

            if (!dataText.startsWith("/"))
            {
              ListeEpicerieBot.mapTextToItems(context.session.storage, dataText, ListeEpicerieBot.removeItemFromCategory);
              ListeEpicerieBot.mapTextToItems(context.session.storage, `${category}, ${dataText}`, ListeEpicerieBot.addItemToCategory);
            }
          });

        message.callbackButtons = ListeEpicerieBridge.markups.listCallbackButtons;

        ListeEpicerieBridge.actions.listRefesh(context);
      }
    , categorizeDisplayCategories: (context) =>
      {
        var message = context.session.message;

        message.callbackButtons = message.callbackButtons.filter((callbackButton) =>
          {
            if (/^\/categorizeSelect(Cancel)?_callback/im.test(callbackButton.callback_data))
            {
              callbackButton.hide = true;
              return true;
            }
            return false;
          });

        for (var categoryLabel in context.session.storage)
        {
          message.callbackButtons[message.callbackButtons.length]
            = Markup.callbackButton(categoryLabel, `/categorizeConfirm_callback ${categoryLabel}`);
        }

        var callbackButtons = Utils.pairElements(message.callbackButtons).concat(ListeEpicerieBridge.markups.categorizeConfirmCallbackButtons);

        context.editMessageReplyMarkup(Markup.inlineKeyboard(callbackButtons).resize());
      }
    , categorizeRefresh: (context) =>
      {
        var message = context.session.message;

        message.callbackButtons = message.callbackButtons.filter((callbackButton) =>
          {
            if (/^\/categorizeSelect(Cancel)?_callback/im.test(callbackButton.callback_data))
            {
              callbackButton.hide = false;
              return true;
            }
            return false;
          });

        var callbackButtons = Utils.pairElements(message.callbackButtons).concat(ListeEpicerieBridge.markups.categorizeCallbackButtons);

        context.editMessageReplyMarkup(Markup.inlineKeyboard(callbackButtons).resize());
      }
    , categorizeSelect: (context) =>
      {
        var message = context.session.message;

        var dataText = context.update.callback_query.data.replace(/^\/categorizeSelect_callback.*?\s*/im, "").trim();

        var selectedStorage = Object.create(null);

        ListeEpicerieBot.mapTextToItems(context.session.storage, dataText, (storage, categoryLabel, itemLabel, itemQuantity) =>
          {
            if (typeof selectedStorage[categoryLabel] === "undefined")
            {
              selectedStorage[categoryLabel] = Object.create(null);
            }

            selectedStorage[categoryLabel][itemLabel] = itemQuantity;
          });

        message.callbackButtons = message.callbackButtons.map((callbackButton) =>
          {
            var itemLabel = callbackButton.text.replace(/^\u2705 /g, "");

            for (var categoryLabel in selectedStorage)
            {
              if (typeof selectedStorage[categoryLabel][itemLabel] !== "undefined")
              {
                var itemQuantity = selectedStorage[categoryLabel][itemLabel];
                callbackButton.text = `\u2705 ${itemLabel}`;
                callbackButton.callback_data = `/categorizeSelectCancel_callback ${itemLabel}, ${itemQuantity}`;
                break;
              }
            }

            return callbackButton;
          });

        var callbackButtons = Utils.pairElements(message.callbackButtons).concat(ListeEpicerieBridge.markups.categorizeCallbackButtons);

        context.editMessageReplyMarkup(Markup.inlineKeyboard(callbackButtons).resize());
      }
    , categorizeSelectCancel: (context) =>
      {
        var message = context.session.message;

        var dataText = context.update.callback_query.data.replace(/^\/categorizeSelectCancel_callback.*?\s*/im, "").trim();

        var unselectedStorage = Object.create(null);

        ListeEpicerieBot.mapTextToItems(context.session.storage, dataText, (storage, categoryLabel, itemLabel, itemQuantity) =>
          {
            if (typeof unselectedStorage[categoryLabel] === "undefined")
            {
              unselectedStorage[categoryLabel] = Object.create(null);
            }

            unselectedStorage[categoryLabel][itemLabel] = itemQuantity;
          });

        message.callbackButtons = message.callbackButtons.map((callbackButton) =>
          {
            var itemLabel = callbackButton.text.replace(/^\u2705 /g, "");

            for (var categoryLabel in unselectedStorage)
            {
              if (typeof unselectedStorage[categoryLabel][itemLabel] !== "undefined")
              {
                var itemQuantity = unselectedStorage[categoryLabel][itemLabel];
                callbackButton.text = itemLabel;
                callbackButton.callback_data = `/categorizeSelect_callback ${itemLabel}, ${itemQuantity}`;
                break;
              }
            }

            return callbackButton;
          });

        var callbackButtons = Utils.pairElements(message.callbackButtons).concat(ListeEpicerieBridge.markups.categorizeCallbackButtons);

        context.editMessageReplyMarkup(Markup.inlineKeyboard(callbackButtons).resize());
      }
    , cancel: (context) =>
      {
        var message = context.session.message;

        message.callbackButtons = ListeEpicerieBridge.markups.listCallbackButtons;

        context.editMessageReplyMarkup(Markup.inlineKeyboard(message.callbackButtons).resize());
      }
    , listRefesh: (context) =>
      {
        try
        {
          context.tg.callApi(
            "editMessageText"
            , Utils.createMessageList(
                context.session
                , ListeEpicerieBot.list(context.session)
                , Markup.inlineKeyboard(context.session.message.callbackButtons).resize().extra()));

          Object.assign(context.sessionPersistent, context.session);
        }
        catch (exception) {}
      }
    , removeCategories: (context) =>
      {
        var message = context.session.message;

        message.callbackButtons = [];

        for (var category in context.session.storage)
        {
          message.callbackButtons[message.callbackButtons.length]
            = Markup.callbackButton(category, `/removeCategory_callback ${category}`);
        }

        var callbackButtons = Utils.pairElements(message.callbackButtons).concat(ListeEpicerieBridge.markups.removeCategoriesCallbackButtons);

        context.editMessageReplyMarkup(Markup.inlineKeyboard(callbackButtons).resize());
      }
    , removeCategoriesConfirm: (context) =>
      {
        var message = context.session.message;

        message.callbackButtons.forEach((callbackButton) =>
          {
            var dataText = callbackButton.callback_data.replace(/^\/removeCategoryCancel_callback.*?\s*/im, "");

            ListeEpicerieBot.mapTextToCategories(context.session.storage, dataText, ListeEpicerieBot.removeCategory);
          });

        message.callbackButtons = ListeEpicerieBridge.markups.listCallbackButtons;

        ListeEpicerieBridge.actions.listRefesh(context);
      }
    , removeCategory: (context) =>
      {
        var message = context.session.message;

        var dataText = context.update.callback_query.data.replace(/^\/removeCategory_callback.*?\s*/im, "").trim();

        var removalCategories = [];

        ListeEpicerieBot.mapTextToCategories(context.session.storage, dataText, (storage, categoryLabel) =>
          {
            if (typeof storage[categoryLabel] !== "undefined")
            {
              removalCategories[removalCategories.length] = categoryLabel;
            }
          });

        message.callbackButtons = message.callbackButtons.map((callbackButton) =>
          {
            var categoryLabel = callbackButton.text.replace(/^\u274E /g, "");

            removalCategories.forEach((categoryLabelCandidate) =>
              {
                if (categoryLabel === categoryLabelCandidate)
                {
                  callbackButton.text = `\u274E ${categoryLabel}`;
                  callbackButton.callback_data = `/removeCategoryCancel_callback ${categoryLabel}`;
                }
              });

            return callbackButton;
          });

        var callbackButtons = Utils.pairElements(message.callbackButtons).concat(ListeEpicerieBridge.markups.removeCategoriesCallbackButtons);

        context.editMessageReplyMarkup(Markup.inlineKeyboard(callbackButtons).resize());
      }
    , removeCategoryCancel: (context) =>
      {
        var message = context.session.message;

        var dataText = context.update.callback_query.data.replace(/^\/removeCategoryCancel_callback.*?\s*/im, "").trim();

        var removalCategories = [];

        ListeEpicerieBot.mapTextToCategories(context.session.storage, dataText, (storage, categoryLabel) =>
          {
            if (typeof storage[categoryLabel] !== "undefined")
            {
              removalCategories[removalCategories.length] = categoryLabel;
            }
          });

        message.callbackButtons = message.callbackButtons.map((callbackButton) =>
          {
            var categoryLabel = callbackButton.text.replace(/^\u274E /g, "");

            removalCategories.forEach((categoryLabelCandidate) =>
              {
                if (categoryLabel === categoryLabelCandidate)
                {
                  callbackButton.text = categoryLabel;
                  callbackButton.callback_data = `/removeCategory_callback ${categoryLabel}`;
                }
              });

            return callbackButton;
          });

        var callbackButtons = Utils.pairElements(message.callbackButtons).concat(ListeEpicerieBridge.markups.removeCategoriesCallbackButtons);

        context.editMessageReplyMarkup(Markup.inlineKeyboard(callbackButtons).resize());
      }
    , removeItem: (context) =>
      {
        var message = context.session.message;

        var dataText = context.update.callback_query.data.replace(/^\/removeItem_callback.*?\s*/im, "").trim();

        var removalStorage = Object.create(null);

        ListeEpicerieBot.mapTextToItems(context.session.storage, dataText, (storage, categoryLabel, itemLabel, itemQuantity) =>
          {
            if (typeof removalStorage[categoryLabel] === "undefined")
            {
              removalStorage[categoryLabel] = Object.create(null);
            }

            removalStorage[categoryLabel][itemLabel] = itemQuantity;
          });

        message.callbackButtons = message.callbackButtons.map((callbackButton) =>
          {
            var itemLabel = callbackButton.text.replace(/^\u274E /g, "");

            for (var categoryLabel in removalStorage)
            {
              if (typeof removalStorage[categoryLabel][itemLabel] !== "undefined")
              {
                var itemQuantity = removalStorage[categoryLabel][itemLabel];
                callbackButton.text = `\u274E ${itemLabel}`;
                callbackButton.callback_data = `/removeItemCancel_callback ${itemLabel}, ${itemQuantity}`;
                break;
              }
            }

            return callbackButton;
          });

        var callbackButtons = Utils.pairElements(message.callbackButtons).concat(ListeEpicerieBridge.markups.removeItemsCallbackButtons);

        context.editMessageReplyMarkup(Markup.inlineKeyboard(callbackButtons).resize());
      }
    , removeItemCancel: (context) =>
      {
        var message = context.session.message;

        var dataText = context.update.callback_query.data.replace(/^\/removeItemCancel_callback.*?\s*/im, "").trim();

        var restoredStorage = Object.create(null);

        ListeEpicerieBot.mapTextToItems(context.session.storage, dataText, (storage, categoryLabel, itemLabel, itemQuantity) =>
          {
            if (typeof restoredStorage[categoryLabel] === "undefined")
            {
              restoredStorage[categoryLabel] = Object.create(null);
            }

            restoredStorage[categoryLabel][itemLabel] = itemQuantity;
          });

        message.callbackButtons = message.callbackButtons.map((callbackButton) =>
          {
            var itemLabel = callbackButton.text.replace(/^\u274E /g, "");

            for (var categoryLabel in restoredStorage)
            {
              if (typeof restoredStorage[categoryLabel][itemLabel] !== "undefined")
              {
                var itemQuantity = restoredStorage[categoryLabel][itemLabel];
                callbackButton.text = itemLabel;
                callbackButton.callback_data = `/removeItem_callback ${itemLabel}, ${itemQuantity}`;
                break;
              }
            }

            return callbackButton;
          });

        var callbackButtons = Utils.pairElements(message.callbackButtons).concat(ListeEpicerieBridge.markups.removeItemsCallbackButtons);

        context.editMessageReplyMarkup(Markup.inlineKeyboard(callbackButtons).resize());
      }
    , removeItems: (context) =>
      {
        var message = context.session.message;

        message.callbackButtons = [];

        for (var category in context.session.storage)
        {
          for (var entry in context.session.storage[category])
          {
            message.callbackButtons[message.callbackButtons.length]
              = Markup.callbackButton(entry, `/removeItem_callback ${entry}, ${context.session.storage[category][entry]}`);
          }
        }

        var callbackButtons = Utils.pairElements(message.callbackButtons).concat(ListeEpicerieBridge.markups.removeItemsCallbackButtons);

        context.editMessageReplyMarkup(Markup.inlineKeyboard(callbackButtons).resize());
      }
    , removeItemsConfirm: (context) =>
      {
        var message = context.session.message;

        message.callbackButtons.forEach((callbackButton) =>
          {
            var dataText = callbackButton.callback_data.replace(/^\/removeItemCancel_callback.*?\s*/im, "");

            ListeEpicerieBot.mapTextToItems(context.session.storage, dataText, ListeEpicerieBot.removeItemFromCategory);
          });

        message.callbackButtons = ListeEpicerieBridge.markups.listCallbackButtons;

        ListeEpicerieBridge.actions.listRefesh(context);
      }
    }
  , commands:
    {
      add: (context) =>
      {
        context.session.action = "ADD";

        if (!ListeEpicerieBridge.commands._routeAction(context))
        {
          context.reply("Que voulez-vous ajouter?", Markup.forceReply().extra());
        }
      }
      , addCategories: (context) =>
        {
          context.session.action = "ADD_CATEGORIES";

          if (!ListeEpicerieBridge.commands._routeAction(context))
          {
            context.reply("Quelles catégories voulez-vous ajouter?", Markup.forceReply().extra());
          }
        }
      , list: (context) =>
        {
          context.session.message.callbackButtons = ListeEpicerieBridge.markups.listCallbackButtons;

          context.replyWithMarkdown(
            ListeEpicerieBot.list(context.session)
            , Markup.inlineKeyboard(context.session.message.callbackButtons).resize().extra()
          ).then((message)=>
            {
              context.session.list.messageId = message.message_id;

              Object.assign(context.sessionPersistent, context.session);
            });

          Object.assign(context.sessionPersistent, context.session);
        }
      , masterMessage: (context) =>
        {
          try
          {
            context.session.masterMessage.id = context.message.message_id;
            context.session.masterMessage.text = context.message.text;

            context.reply("Écrivez votre liste:", Markup.forceReply().extra());

            Object.assign(context.sessionPersistent, context.session);
          }
          catch (exception) {}
        }
      , removeItems: (context) =>
        {
          context.session.action = "REMOVE_ITEMS";

          if (!ListeEpicerieBridge.commands._routeAction(context))
          {
            context.reply("Que voulez-vous retirer?", Markup.forceReply().extra());
          }
        }
      , start: (context) =>
        {
          context.session.chatId = context.message.chat.id;

          Object.assign(context.sessionPersistent, context.session);

          ListeEpicerieBridge.commands.list(context);
        }
      , _routeAction: (context) =>
        {
          var actionRouted = false;

          try
          {
            if (ListeEpicerieBot.routeAction(context.session, context.message.text))
            {
              context.session.action = null;
              var categoriesAdded = true;

              context.session.message.callbackButtons = ListeEpicerieBridge.markups.listCallbackButtons;

              ListeEpicerieBridge.actions.listRefesh(context);

              actionRouted = true;
            }
          }
          catch (exception) {}
          finally
          {
            return actionRouted;
          }
        }
    }
  , markups:
    {
      listCallbackButtons:
      [
        [
          Markup.callbackButton("Ajouter dans la liste", "/add_callback")
          , Markup.callbackButton("Retirer de la liste", "/removeItems_callback")
        ]
        , [
            Markup.callbackButton("Ajouter des catégories", "/addCategories_callback")
            , Markup.callbackButton("Retirer des catégories", "/removeCategories_callback")
          ]
        , [
            Markup.callbackButton("Catégoriser", "/categorize_callback")
            , Markup.callbackButton("Rafraîchir la liste", "/listRefesh_callback")
          ]
      ]
      , removeItemsCallbackButtons:
        [[
          Markup.callbackButton("Confirmer", "/removeItemsConfirm_callback")
          , Markup.callbackButton("Annuler", "/cancel_callback")
        ]]
      , removeCategoriesCallbackButtons:
        [[
          Markup.callbackButton("Confirmer", "/removeCategoriesConfirm_callback")
          , Markup.callbackButton("Annuler", "/cancel_callback")
        ]]
      , categorizeCallbackButtons:
        [
          [ Markup.callbackButton("Confirmer & selectionner une catégorie", "/categorizeDisplayCategories_callback") ]
          , [ Markup.callbackButton("Annuler", "/cancel_callback") ]
        ]
      , categorizeConfirmCallbackButtons:
        [[
          Markup.callbackButton("Retour", "/categorizeRefresh_callback")
          , Markup.callbackButton("Annuler", "/cancel_callback")
        ]]
    }
};

module.exports = ListeEpicerieBridge;
